mutate(list = as.list(data %>% pluck(1)))
.df %>% dplyr::slice(1) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(a = as.list(data %>% pluck(1) ) ))
.df %>% dplyr::slice(1) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(a = as.list(data %>% pluck(1) ) )) %>% pull(list)
.df %>% dplyr::slice(1) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(`Land Cover` = as.list(data %>% pluck(1) ) )) %>% pull(list)
yaml_data[[1]]
.df %>% dplyr::slice(1:2) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(`Land Cover` = as.list(data %>% pluck(1) ) )) %>% pull(list)
.df %>% dplyr::slice(1:2)
.df %>% dplyr::slice(1:2) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest()
.df %>% dplyr::slice(1:2) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(`Land Cover` = as.list(data %>% pluck(1) ) )) %>% pull(list)
.df %>% dplyr::slice(2) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(`Land Cover` = as.list(data %>% pluck(1) ) )) %>% pull(list)
.df %>% dplyr::slice(2) %>% group_by(variable)
.df %>% dplyr::slice(2) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(!!variable := = as.list(data %>% pluck(1) ) )) %>% pull(list)
.df %>% dplyr::slice(2) %>% group_by(variable) %>%
#mutate(test = as.list(c(unit, variable))) %>% pull(test)
nest() %>% ungroup()  %>%
mutate(list = list(!!variable := as.list(data %>% pluck(1) ) )) %>% pull(list)
.df %>% dplyr::slice(2) %>% group_by(variable) %>%
nest() %>% ungroup()  %>%
mutate(list = list(!!variable := as.list(data %>% pluck(1) ) )) %>% pull(list)
.df %>% dplyr::slice(2) %>% group_by(variable)
.df %>% dplyr::slice(2) %>% group_by(variable) %>%
nest() %>% ungroup()
.df %>% dplyr::slice(2) %>% group_by(variable) %>%
nest() %>% ungroup()  -> .df1
.df1$variable
.df1 %>%
mutate(list = list(!!.df1$variable := as.list(data %>% pluck(1) ) )) %>% pull(list)
.df1 %>%
mutate(list = list(!!.df1$variable := as.list(data %>% pluck(1) ) ))
.df1 %>%
mutate(list = list(!!"AA":= as.list(data %>% pluck(1) ) )) %>% pull(list)
.df1 %>%
mutate(list = list(get("AA")= as.list(data %>% pluck(1) ) )) %>% pull(list)
.df1
names(.df1$data) <- .df1$variable
names(.df1$data)
.df1 %>%
mutate(list = list(variable = as.list(data %>% pluck(1) ) )) %>% pull(list)
.df1 %>%
mutate(list = list(variable = as.list(data %>% pluck(1) ) ))
.df1
.df %>% dplyr::slice(2) %>% group_by(variable) %>%
nest() %>% ungroup()  -> .df1
.df1
.df1 %>%
mutate(list = list(variable = as.list(data %>% pluck(1) ) ))
names(.df1$list) <- .df1$variable
.df1 %>%
mutate(list = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$list) <- .df2$variable
names(.df2$list)
.df2 %>%  pull(list)
.df %>% dplyr::slice(1) %>% group_by(variable) %>%
nest() %>% ungroup()  -> .df1
.df1 %>%
mutate(list = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$list) <- .df2$variable
.df2 %>%  pull(list)
.df %>% #dplyr::slice(1) %>%
group_by(variable) %>%
nest() %>% ungroup()  -> .df1
.df1 %>%
mutate(list = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$list) <- .df2$variable
.df2 %>%  pull(list)
.df2$variable
names(.df2$list)
.df2
.df %>% #dplyr::slice(1) %>%
group_by(variable) %>%
nest() %>% ungroup()  -> .df1
.df1 %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2 %>% pull(data)
.df
.df %>% #dplyr::slice(1) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup()  -> .df1
.df %>% #dplyr::slice(1) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
yaml_data
.df2
.df2 %>% pull(data)
.df2 %>% pull(data) %>% as.list()
.df %>% dplyr::slice(1) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2 %>% pull(data) %>% as.list()
yaml_data[[1]][[1]][[1]]
yaml_data[[1]]
.df2 %>% pull(data)
yaml_data[[2]]
yaml_data
yaml_data %>% names()
.df %>% #dplyr::slice(1) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2 %>% pull(data)
.df2
.df2 %>% filter(variable == "Land Cover") %>%  pull(data)
.df2$variable
.df2$data
.df2$data %>% as.list()
.df2$data %>% class
.df2$data
.df2 %>% class
.df2
.df2 %>% spread(variable, data)
.df2 %>% spread(variable, data) %>% as.list
.df2 %>% spread(variable, data) %>% as.list(all.names = F)
yaml_data
.df %>% #dplyr::slice(1) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2 %>% spread(variable, data) %>% as.list(all.names = F)
yaml_data %>% names()
yaml_data
.df2 %>% spread(variable, data) %>% as.list(all.names = F) -> test
test[[1]]
test[[2]]
test[[3]]
test[[4]]
test[[4]][[2]]
test[[4]][[1]]
.df2
.df2$data
.df2$data -> test
test[[1]]
test[[2]]
test
yaml_data[[25]]
.df2$data[[25]]
.df2$variable
.df2
.df2 %>% filter(variable == "Land Cover|Cropland|Cereals") %>% pull(data)
.df %>% #dplyr::slice(1) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck() ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data[[25]]
test[[2]]
.df2$data[[25]]
.df %>% dplyr::slice(1) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck() ) )) -> .df2
.df2
names(.df2$data) <- .df2$variable
.df2
.df2$data
.df %>% dplyr::slice(1) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
.df
lapply(1:2, function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
}
)
.df2
lapply(1:2, function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
DF_To_yamlList <- function(){
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
A
DF_To_yamlList <- function(){
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
A %>% mutate(tier = 1) %>%
DF_To_yamlList
DF_To_yamlList <- function(.df){
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
A %>% mutate(tier = 1) %>%
DF_To_yamlList
A %>% mutate(tier = 1) %>%
DF_To_yamlList %>%
write_yaml("temp/test.yaml")
A %>% mutate(tier = 1) %>%
DF_To_yamlList
A %>% mutate(tier = "1") %>%
DF_To_yamlList %>%
write_yaml("temp/test.yaml")
A %>% mutate(tier = as.integer(1)) %>%
DF_To_yamlList %>%
write_yaml("temp/test.yaml")
DF_To_yamlList <- function(.df){
assertthat::assert_that(c("variable", "description", "unit", "tier") %in% names(.df) )
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
A %>% mutate(tier = as.integer(1)) %>%
DF_To_yamlList %>%
write_yaml("temp/test.yaml")
assertthat::assert_that(all(c("variable", "description", "unit", "tier") %in% names(.df) ))
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(is.integer(.df$tier), "Column is not of integer type.")
A %>% mutate(tier = as.integer(1))-> .df
A %>% mutate(tier = as.integer(1))-> .df
assertthat::assert_that(is.integer(.df$tier), "Column is not of integer type; please convert it.")
is.integer(.df$tier)
assertthat::assert_that(is.integer(.df$tier), msg = "Column is not of integer type; please convert it.")
DF_To_yamlList <- function(.df){
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(all(c("variable", "description", "unit", "tier") %in% names(.df)))
assertthat::assert_that(is.integer(.df$tier), msg = "Column is not of integer type; please convert it.")
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
A %>% mutate(tier = as.integer(1)) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
.df
# Bind all----
AR6_Var_AFOLU_original %>%
bind_rows(AR6_Var_AFOLU_add_food) %>%
bind_rows(AR6_Var_AFOLU_add_water) %>%
bind_rows(AR6_Var_AFOLU_add_price) %>%
bind_rows(AR6_Var_AFOLU_add_labor) ->
AR6_Var_AFOLU_all
library(dplyr)
# Bind all----
AR6_Var_AFOLU_original %>%
bind_rows(AR6_Var_AFOLU_add_food) %>%
bind_rows(AR6_Var_AFOLU_add_water) %>%
bind_rows(AR6_Var_AFOLU_add_price) %>%
bind_rows(AR6_Var_AFOLU_add_labor) ->
AR6_Var_AFOLU_all
Load AR6 definitions
readxl::read_excel("temp/IPCC_AR6_WG3_Global_sectoral_Pathways_scenario_template_v2.1.xlsx",
sheet = "variable_definitions_Full") %>%
select(Category, Variable, Unit, Definition, Core, AFOLU) -> AR6_Var
AR6_Var %>%
# keep only AFOLU variables
filter(!is.na(AFOLU)) %>%
# remove emission variables
filter(Category != "Emissions") ->
AR6_Var_AFOLU_original
## Adding AFOLU related food variables ----
AR6_Var %>%
filter(is.na(AFOLU)) %>%
filter(grepl("Food", Variable)) ->
AR6_Var_AFOLU_add_food
## Adding AFOLU related water variables ----
AR6_Var %>%
filter(Category == "Water") %>%
filter(grepl("Irrigation|Livestock", Variable)) ->
AR6_Var_AFOLU_add_water
## Adding AFOLU related price variables ----
AR6_Var %>%
filter(grepl("Price", Variable)) %>%
# Keep only biomass or ag
filter(grepl("Primary Energy\\|Biomass|Ag", Variable)) ->
AR6_Var_AFOLU_add_price
## Adding AFOLU related labor variables ----
AR6_Var %>%
filter(grepl("Employment", Variable)) %>%
# Keep only biomass or ag
filter(grepl("Ag", Variable)) ->
AR6_Var_AFOLU_add_labor
# Bind all----
AR6_Var_AFOLU_original %>%
bind_rows(AR6_Var_AFOLU_add_food) %>%
bind_rows(AR6_Var_AFOLU_add_water) %>%
bind_rows(AR6_Var_AFOLU_add_price) %>%
bind_rows(AR6_Var_AFOLU_add_labor) ->
AR6_Var_AFOLU_all
DF_To_yamlList <- function(.df){
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(all(c("variable", "description", "unit", "tier") %in% names(.df)))
assertthat::assert_that(is.integer(.df$tier), msg = "Column is not of integer type; please convert it.")
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(variable, description, unit, tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% dplyr::pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
AR6_Var_AFOLU_all %>% mutate(tier = as.integer(1)) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
AR6_Var_AFOLU_all
AR6_Var_AFOLU_all %>% mutate(tier = as.integer(Core)) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
AR6_Var_AFOLU_all %>% mutate(tier = as.integer(Core))
DF_To_yamlList <- function(.df){
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(all(c("Variable", "Description", "Unit", "Tier") %in% names(.df)))
assertthat::assert_that(is.integer(.df$tier), msg = "Column is not of integer type; please convert it.")
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(Variable, Description, Unit, Tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% dplyr::pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
AR6_Var_AFOLU_all %>%
transmute(Tier = as.integer(Core)) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
AR6_Var_AFOLU_all
AR6_Var_AFOLU_all %>%
mutate(Tier = as.integer(Core), Description = Definition) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
DF_To_yamlList <- function(.df){
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(all(c("Variable", "Description", "Unit", "Tier") %in% names(.df)))
assertthat::assert_that(is.integer(.df$Tier), msg = "Column is not of integer type; please convert it.")
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(Variable, Description, Unit, Tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% dplyr::pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
AR6_Var_AFOLU_all %>%
mutate(Tier = as.integer(Core), Description = Definition) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
library(tidyr)
DF_To_yamlList <- function(.df){
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(all(c("Variable", "Description", "Unit", "Tier") %in% names(.df)))
assertthat::assert_that(is.integer(.df$Tier), msg = "Column is not of integer type; please convert it.")
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(Variable, Description, Unit, Tier) %>%
group_by(variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(variable = as.list(data %>% dplyr::pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$variable
.df2$data
}
)
}
AR6_Var_AFOLU_all %>%
mutate(Tier = as.integer(Core), Description = Definition) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
DF_To_yamlList <- function(.df){
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(all(c("Variable", "Description", "Unit", "Tier") %in% names(.df)))
assertthat::assert_that(is.integer(.df$Tier), msg = "Column is not of integer type; please convert it.")
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(Variable, Description, Unit, Tier) %>%
group_by(Variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(Variable = as.list(data %>% dplyr::pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$Variable
.df2$data
}
)
}
AR6_Var_AFOLU_all %>%
mutate(Tier = as.integer(Core), Description = Definition) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
?pluck
DF_To_yamlList <- function(.df){
#assert columns in df include key ones
assertthat::assert_that(is.data.frame(.df))
assertthat::assert_that(all(c("Variable", "Description", "Unit", "Tier") %in% names(.df)))
assertthat::assert_that(is.integer(.df$Tier), msg = "Column is not of integer type; please convert it.")
lapply(1:nrow(.df), function(x){
.df %>% dplyr::slice(x) %>%
select(Variable, Description, Unit, Tier) %>%
group_by(Variable) %>%
nest() %>% ungroup() %>%
mutate(data = list(Variable = as.list(data %>% purrr::pluck(1) ) )) -> .df2
names(.df2$data) <- .df2$Variable
.df2$data
}
)
}
AR6_Var_AFOLU_all %>%
mutate(Tier = as.integer(Core), Description = Definition) %>%
DF_To_yamlList %>%
yaml::write_yaml("temp/test.yaml")
AR6_Var_AFOLU_all %>% readr::write_csv("temp/AR6_Var_AFOLU_all.csv")
